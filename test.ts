import { decodeFunctionData } from "viem";
import { BAAL_ABI, IAVATAR_ABI, MULTISEND_ABI, WXDAI_ABI } from "./abis";
import { decodeMulti } from "ethers-multisend";

// proposal on gnosis chain
// proposal https://admin.daohaus.club/#/molochV3/0x64/0xf02fd4286917270cb94fbc13a0f4e1ed76f7e986/proposal/16

const proposalData =
  "0x8d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000029900f02fd4286917270cb94fbc13a0f4e1ed76f7e98600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000244b3c98bbb000000000000000000000000cbe750f9841ce79dcbcd0aa577a5bf8743ca10140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4468721a7000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e48d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009900e91d153e0b41518a2ce8dd3d7944fa863463a97d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000007bc48221928f11184b376da7a57650768dfd3332000000000000000000000000000000000000000000000015af1d78b58c40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

const proposalAction = decodeMulti(proposalData);

console.log(proposalAction);

const data0 = proposalAction?.[0]?.data;

if (!data0) {
  throw new Error("data0 is undefined");
}

const result0 = decodeFunctionData({
  data: data0 as `0x${string}`,
  abi: BAAL_ABI,
});

console.log(result0);

const data1 = result0?.args?.[2];

const found_data =
  "0x468721a7000000000000000000000000a238cbeb142c10ef7ad8442c6d1f9e89e07e776100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e48d80ff0a0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009900e91d153e0b41518a2ce8dd3d7944fa863463a97d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000007bc48221928f11184b376da7a57650768dfd3332000000000000000000000000000000000000000000000015af1d78b58c4000000000000000000000000000000000000000000000000000000000000000000000000000";

if (!data1) {
  throw new Error("data1 is undefined");
}

if (data1 !== found_data) {
  throw new Error("data1 is not equal to found_data");
}

const result = decodeFunctionData({
  data: data1 as `0x${string}`,
  abi: IAVATAR_ABI,
});

console.log(result);

const data2 = result?.args?.[2];

if (!data2) {
  throw new Error("data2 is undefined");
}

const result2 = decodeFunctionData({
  data: data2 as `0x${string}`,
  abi: MULTISEND_ABI,
});

console.log(result2);

const decoded = decodeMulti(data2 as `0x${string}`);

console.log(decoded);

const data3 = decoded?.[0]?.data;

if (!data3) {
  throw new Error("data3 is undefined");
}

const result3 = decodeFunctionData({
  data: data3 as `0x${string}`,
  abi: WXDAI_ABI,
});

console.log(result3);
